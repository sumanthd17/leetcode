class Solution {
public:
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        vector<vector<int>> ans;
        vector<int> current;
        dfs(ans, 0, candidates, target, current);
        return ans;
    }
    void dfs(vector<vector<int>>& ans, int index,vector<int>& candidates, int target, vector<int>& current) {
        if (target < 0) return;
        if (target == 0) {
            ans.push_back({current});
            return;
        }
        for (int i = index; i < candidates.size(); i++) {
            current.push_back(candidates[i]);
            dfs(ans, i, candidates, target-candidates[i], current);
            current.pop_back();
        }
    }
};