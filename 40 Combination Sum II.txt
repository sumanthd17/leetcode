class Solution {
public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(), candidates.end());
        vector<vector<int>> ans;
        vector<int> current;
        dfs(ans, candidates, 0, current, target);
        return ans;
    }
    void dfs(vector<vector<int>>& ans, vector<int>& candidates, int index, vector<int>& current, int target) {
        if (target < 0) return;
        if (target == 0) {
            for (int i = 0; i < ans.size(); i++) {
                if (ans[i] == current)
                    return;
            }
            ans.push_back(current);
            return;
        }
        for (int i = index; i < candidates.size(); i++) {
            current.push_back(candidates[i]);
            dfs(ans, candidates, i+1, current, target-candidates[i]);
            current.pop_back();
        }
    }
};