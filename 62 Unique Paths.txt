// class Solution {
// public:
//     int uniquePaths(int m, int n) {
//         int r = 0, c = 0;
//         return count(m-1, n-1, c, r, 0);
//     }
//     int count(int m, int n, int c, int r, int total) {
//         if (c == m && r == n)
//             return ++total;
//         if (c < m)
//             total = count(m,n,c+1,r, total);
//         if (r < n)
//             total = count(m,n,c,r+1, total);
//         return total;
//     }
// };

class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<vector<int>> dp(n, vector<int>(m, 0));
        for (int i = 0; i < m; i++)
            dp[0][i] = 1;
        for (int i = 0; i < n; i++)
            dp[i][0] = 1;
        for (int i = 1; i < n; i++) {
            for (int j = 1; j < m; j++)
                dp[i][j] = dp[i][j-1] + dp[i-1][j];
        }
        return dp[n-1][m-1];
    }
};