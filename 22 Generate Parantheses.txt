class Solution {
public:
    vector<string> generateParenthesis(int n) {
        vector<string> ans;
        string current;
        backtrack(ans, current, 0, 0, n);
        return ans;
    }
    void backtrack(vector<string>& ans, string current, int open, int close, int n) {
        if (current.size() == n*2) {
            ans.push_back(current);
            return;
        }
        if (open < n) backtrack(ans, current + '(', open+1, close, n);
        if (close < open) backtrack(ans, current + ')', open, close+1, n);
    }
};